<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Response;
use Spatie\Permission\Exceptions\RoleDoesNotExist;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param  \Exception  $exception
     * @return void
     *
     * @throws \Exception
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $exception
     * @return \Symfony\Component\HttpFoundation\Response
     *
     * @throws \Exception
     */
    public function render($request, Exception $exception)
    {
        if($exception instanceof AuthorizationException)
            return response()->json(['message'=> __('errors.unauthorized')], Response::HTTP_FORBIDDEN);
        elseif($exception instanceof NotFoundHttpException)
            return response()->json(['message' => $exception->getMessage()], $exception->getStatusCode());
        elseif ($exception instanceof ModelNotFoundException or $exception instanceof RoleDoesNotExist)
            return response()->json(['message' => trans_choice('errors.not_found', 1, ['attr' => 'ID'])],
                Response::HTTP_BAD_REQUEST);

        return parent::render($request, $exception);
    }

    protected function unauthenticated($request, AuthenticationException $exception)
    {
//        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
        return \response()->json(['message'=> __('errors.unauthenticated')], Response::HTTP_UNAUTHORIZED);
    }


}
